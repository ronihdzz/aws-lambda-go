name: FastAPI CI/CD

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

permissions:
  contents: write

# Re‚Äêusar versiones y directorios en todos los jobs
env:
  PYTHON_VERSION: "3.12"
  COVERAGE_REPORTS: coverage-reports

jobs:


###############################################################################
# 3.  BUILD 
###############################################################################

  build:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: my-fastapi-lambda
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
      BRANCH_ENV_MAP: '{"main": "prod", "development": "dev", "staging": "stg", "testing": "tst"}'

    steps:
      - uses: actions/checkout@v3

      - name: üõ†Ô∏è Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: üîê Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: üîê Login a ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üß† Mapear rama a entorno y generar tags
        run: |
          echo "üì¶ Configurando entorno y versionado..."

          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "üîç Rama detectada: $BRANCH_NAME"
          echo "üß≠ Mapeo de ramas a entornos: $BRANCH_ENV_MAP"

          ENVIRONMENT=$(echo "$BRANCH_ENV_MAP" | jq -r --arg branch "$BRANCH_NAME" '.[$branch]')
          if [[ "$ENVIRONMENT" == "null" || -z "$ENVIRONMENT" ]]; then
            echo "‚ùå Error: rama '$BRANCH_NAME' no est√° mapeada a un entorno v√°lido."
            exit 1
          fi

          VERSION=$(date -u +"%Y%m%dT%H%M%SZ")

          echo "üè∑Ô∏è ENVIRONMENT=$ENVIRONMENT"
          echo "üìÖ VERSION=$VERSION"

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$ECR_REGISTRY/$ECR_REPO_NAME:$ENVIRONMENT-$VERSION" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$ECR_REGISTRY/$ECR_REPO_NAME:$ENVIRONMENT-latest" >> $GITHUB_ENV

      - name: üèóÔ∏è Build de imagen Docker para Lambda
        run: |
          docker build \
            -f docker_images/deploy/Dockerfile.deploy \
            -t $IMAGE_VERSION .

          docker tag $IMAGE_VERSION $IMAGE_LATEST

      - name: üöÄ Push de im√°genes a ECR
        run: |
          docker push $IMAGE_VERSION
          docker push $IMAGE_LATEST

      - name: üì§ Guardar variables como artifact
        run: |
          echo "IMAGE_LATEST=$IMAGE_LATEST" > image.env
          echo "ENVIRONMENT=$ENVIRONMENT" >> image.env

      - name: üì¶ Subir artifact con IMAGE_LATEST
        uses: actions/upload-artifact@v4
        with:
          name: image-env-${{ github.ref_name }}
          path: image.env


##############################################################################
# 4.  DEPLOY 
##############################################################################

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: build

    env:
      ARTIFACT_NAME: image-env-${{ github.ref_name }}

    steps:
      - name: üîê Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: üì• Descargar artifact con IMAGE_LATEST
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      
      
      - name: üß™ Cargar y validar variables de entorno del build
        run: |
          set -a
          source image.env
          set +a

          echo "üì¶ Imagen a desplegar: $IMAGE_LATEST"
          echo "üåé Entorno detectado: $ENVIRONMENT"

          # Validar que ENVIRONMENT no est√© vac√≠o
          if [[ -z "$ENVIRONMENT" ]]; then
            echo "‚ùå ENVIRONMENT no fue cargado correctamente."
            exit 1
          fi

          # Validar que IMAGE_LATEST no est√© vac√≠o y sea una URI v√°lida
          if [[ -z "$IMAGE_LATEST" || "$IMAGE_LATEST" != *".dkr.ecr."* ]]; then
            echo "‚ùå IMAGE_LATEST no es una URI v√°lida de imagen ECR: $IMAGE_LATEST"
            exit 1
          fi

          echo "IMAGE_LATEST=$IMAGE_LATEST" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV


      - name: üß© Construir nombre completo de la Lambda
        run: |
          FULL_LAMBDA_NAME="${{ secrets.AWS_LAMBDA_BASE_NAME }}-${ENVIRONMENT}"
          echo "üêë Lambda completa: $FULL_LAMBDA_NAME"
          echo "FULL_LAMBDA_NAME=$FULL_LAMBDA_NAME" >> $GITHUB_ENV

      - name: üöÄ Actualizar Lambda con nueva imagen
        run: |
          aws lambda update-function-code \
            --function-name "$FULL_LAMBDA_NAME" \
            --image-uri "$IMAGE_LATEST"

      - name: ‚è≥ Esperar a que termine la actualizaci√≥n
        run: |
          while true; do
            STATUS=$(aws lambda get-function-configuration \
              --function-name "$FULL_LAMBDA_NAME" \
              --query "LastUpdateStatus" --output text)
            echo "Lambda status: $STATUS"
            [[ "$STATUS" == "Successful" ]] && break
            sleep 5
          done

      - name: üì¶ Publicar nueva versi√≥n
        run: |
          aws lambda publish-version \
            --function-name "$FULL_LAMBDA_NAME"  